import os
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APIClient
from rest_framework import status

User = get_user_model()


class Command(BaseCommand):
    help = '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...'))

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å User
        self.test_user_model()

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        self.test_registration_api()

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º URLs
        self.test_urls()

    def test_user_model(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å"""
        self.stdout.write('\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º User –º–æ–¥–µ–ª—å...')

        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        User.objects.filter(email__contains='test.com').delete()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        try:
            partner = User.objects.create_user(
                phone='+996555111111',
                email='partner.test@test.com',
                name='–¢–µ—Å—Ç',
                second_name='–ü–∞—Ä—Ç–Ω—ë—Ä',
                password='SecurePass123p!8Rt'  # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å
            )
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚úÖ –ü–∞—Ä—Ç–Ω—ë—Ä —Å–æ–∑–¥–∞–Ω: {partner.full_name}, —Ä–æ–ª—å: {partner.role}, —Å—Ç–∞—Ç—É—Å: {partner.approval_status}'
                )
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ä–∫–µ—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –ø–∞—Ä–æ–ª—è
            if partner.check_password('SecurePass123'):
                self.stdout.write(self.style.SUCCESS('‚úÖ –ú–∞—Ä–∫–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –ø–∞—Ä–æ–ª—è'))
            else:
                self.stdout.write(self.style.ERROR('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ä–∞'))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞: {e}'))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        try:
            store = User.objects.create_user(
                phone='+996555222222',
                email='store.test@test.com',
                name='–¢–µ—Å—Ç',
                second_name='–ú–∞–≥–∞–∑–∏–Ω',
                password='SecurePass123'
            )
            self.stdout.write(
                self.style.SUCCESS(
                    f'‚úÖ –ú–∞–≥–∞–∑–∏–Ω —Å–æ–∑–¥–∞–Ω: {store.full_name}, —Ä–æ–ª—å: {store.role}, —Å—Ç–∞—Ç—É—Å: {store.approval_status}'
                )
            )
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {e}'))

    def test_registration_api(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.stdout.write('\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...')

        client = APIClient()

        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        User.objects.filter(email__contains='apitest.com').delete()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        partner_data = {
            'name': '–ò–≤–∞–Ω',
            'second_name': '–ü–µ—Ç—Ä–æ–≤',
            'email': 'partner@apitest.com',
            'phone': '+996555333333',
            'password': 'SecurePass123p!8Rt'  # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å
        }

        try:
            response = client.post('/api/auth/register/', partner_data, format='json')
            self.stdout.write(f'–ü–∞—Ä—Ç–Ω—ë—Ä - Status Code: {response.status_code}')

            if response.status_code == status.HTTP_201_CREATED:
                self.stdout.write(self.style.SUCCESS('‚úÖ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ —É—Å–ø–µ—à–Ω–∞'))
                self.stdout.write(f'Response: {response.data}')
            else:
                self.stdout.write(self.style.ERROR('‚ùå API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞'))
                self.stdout.write(f'Errors: {response.data}')

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ API –ø–∞—Ä—Ç–Ω—ë—Ä–∞: {e}'))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
        store_data = {
            'name': '–ü–µ—Ç—Ä',
            'second_name': '–°–∏–¥–æ—Ä–æ–≤',
            'email': 'store@apitest.com',
            'phone': '+996555444444',
            'password': 'SecurePass123'
        }

        try:
            response = client.post('/api/auth/register/', store_data, format='json')
            self.stdout.write(f'–ú–∞–≥–∞–∑–∏–Ω - Status Code: {response.status_code}')

            if response.status_code == status.HTTP_201_CREATED:
                self.stdout.write(self.style.SUCCESS('‚úÖ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–∞'))
                self.stdout.write(f'Response: {response.data}')
            else:
                self.stdout.write(self.style.ERROR('‚ùå API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞'))
                self.stdout.write(f'Errors: {response.data}')

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ API –º–∞–≥–∞–∑–∏–Ω–∞: {e}'))

    def test_urls(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URLs"""
        self.stdout.write('\nüîó –ü—Ä–æ–≤–µ—Ä—è–µ–º URLs...')

        try:
            from django.urls import reverse
            register_url = reverse('users:register')
            self.stdout.write(self.style.SUCCESS(f'‚úÖ URL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {register_url}'))

            login_url = reverse('users:login')
            self.stdout.write(self.style.SUCCESS(f'‚úÖ URL –≤—Ö–æ–¥–∞: {login_url}'))

            profile_url = reverse('users:profile')
            self.stdout.write(self.style.SUCCESS(f'‚úÖ URL –ø—Ä–æ—Ñ–∏–ª—è: {profile_url}'))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å URL: {e}'))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
        self.test_login_api()

        self.stdout.write('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

    def test_login_api(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º API –≤—Ö–æ–¥–∞"""
        self.stdout.write('\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º API –≤—Ö–æ–¥–∞...')

        client = APIClient()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            user = User.objects.get(phone='+996555999999')
        except User.DoesNotExist:
            user = User.objects.create_user(
                phone='+996555999999',
                email='login.test@test.com',
                name='–õ–æ–≥–∏–Ω',
                second_name='–¢–µ—Å—Ç',
                password='SecurePass123'
            )
            self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞: {user.full_name}'))

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
        login_data = {
            'phone': '+996555999999',
            'password': 'SecurePass123'
        }

        try:
            response = client.post('/api/auth/login/', login_data, format='json')
            self.stdout.write(f'–í—Ö–æ–¥ - Status Code: {response.status_code}')

            if response.status_code == status.HTTP_200_OK:
                self.stdout.write(self.style.SUCCESS('‚úÖ API –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω'))
                self.stdout.write(
                    f'–ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã: access={bool(response.data.get("access"))}, refresh={bool(response.data.get("refresh"))}')
            else:
                self.stdout.write(self.style.ERROR('‚ùå API –≤—Ö–æ–¥ –Ω–µ—É—Å–ø–µ—à–µ–Ω'))
                self.stdout.write(f'Errors: {response.data}')

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ API –≤—Ö–æ–¥–∞: {e}'))