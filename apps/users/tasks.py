from celery import shared_task
from django.core.mail import send_mail
from django.conf import settings
from django.utils import timezone
from datetime import timedelta
import logging

logger = logging.getLogger(__name__)


@shared_task(bind=True, max_retries=3)
def send_email_task(self, subject, message, recipient_list, from_email=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email"""
    try:
        if not from_email:
            from_email = settings.DEFAULT_FROM_EMAIL

        send_mail(
            subject=subject,
            message=message,
            from_email=from_email,
            recipient_list=recipient_list,
            fail_silently=False,
        )

        logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {subject} -> {recipient_list}")
        return f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {len(recipient_list)} –∞–¥—Ä–µ—Å–æ–≤"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {exc}")

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        if self.request.retries < self.max_retries:
            logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ 60 —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {self.request.retries + 1})")
            raise self.retry(countdown=60, exc=exc)

        raise exc


@shared_task
def send_password_reset_code_task(user_id, code):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        from .models import User
        user = User.objects.get(id=user_id)

        subject = '–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è - B2B –°–∏—Å—Ç–µ–º–∞'
        message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.name}!

–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ B2B —Å–∏—Å—Ç–µ–º–µ.

–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {code}

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        """

        send_email_task.delay(
            subject=subject,
            message=message,
            recipient_list=[user.email]
        )

        return f"–ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user.email}"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {exc}")
        raise exc


@shared_task
def send_approval_notification_task(user_id, is_approved):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    try:
        from .models import User
        user = User.objects.get(id=user_id)

        if is_approved:
            subject = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ - B2B –°–∏—Å—Ç–µ–º–∞'
            message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.name}!

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ B2B —Å–∏—Å—Ç–µ–º–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            """
        else:
            subject = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ - B2B –°–∏—Å—Ç–µ–º–∞'
            message = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.name}!

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ B2B —Å–∏—Å—Ç–µ–º–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
            """

        send_email_task.delay(
            subject=subject,
            message=message,
            recipient_list=[user.email]
        )

        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user.email}"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {exc}")
        raise exc


@shared_task
def cleanup_expired_password_resets():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    try:
        from .models import PasswordResetRequest

        expired_requests = PasswordResetRequest.objects.filter(
            expires_at__lt=timezone.now(),
            is_used=False
        )

        count = expired_requests.count()
        expired_requests.update(is_used=True)

        logger.info(f"–û—á–∏—â–µ–Ω–æ {count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
        return f"–û—á–∏—â–µ–Ω–æ {count} –∑–∞–ø—Ä–æ—Å–æ–≤"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {exc}")
        raise exc


@shared_task
def daily_reports_task():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from .models import User
        from apps.orders.models import Order
        from apps.debts.models import Debt

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—á–µ—Ä–∞
        yesterday = timezone.now().date() - timedelta(days=1)

        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        new_users = User.objects.filter(created_at__date=yesterday).count()

        # –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        new_orders = Order.objects.filter(order_date__date=yesterday).count()

        # –ù–æ–≤—ã–µ –¥–æ–ª–≥–∏
        new_debts = Debt.objects.filter(created_at__date=yesterday).count()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = f"""
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç B2B —Å–∏—Å—Ç–µ–º—ã –∑–∞ {yesterday}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}
- –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {new_orders}  
- –ù–æ–≤—ã—Ö –¥–æ–ª–≥–æ–≤: {new_debts}

üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}
- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {Order.objects.count()}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {Debt.objects.filter(is_paid=False).count()}
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_emails = list(User.objects.filter(
            role='admin',
            is_active=True
        ).values_list('email', flat=True))

        if admin_emails:
            send_email_task.delay(
                subject=f'–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç B2B —Å–∏—Å—Ç–µ–º—ã - {yesterday}',
                message=report,
                recipient_list=admin_emails
            )

        logger.info(f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {len(admin_emails)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return f"–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {len(admin_emails)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {exc}")
        raise exc


@shared_task
def check_overdue_debts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤"""
    try:
        from apps.debts.models import Debt

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏
        overdue_debts = Debt.objects.filter(
            is_paid=False,
            due_date__lt=timezone.now().date()
        ).select_related('store', 'store__user')

        notifications_sent = 0

        for debt in overdue_debts:
            try:
                days_overdue = (timezone.now().date() - debt.due_date).days

                subject = f'–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å #{debt.id}'
                message = f"""
–£–≤–∞–∂–∞–µ–º—ã–π {debt.store.user.get_full_name()}!

–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å:

üí∞ –°—É–º–º–∞: {debt.remaining_amount} —Å–æ–º
üìÖ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {debt.due_date}
‚è∞ –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {days_overdue} –¥–Ω–µ–π

–û–ø–∏—Å–∞–Ω–∏–µ: {debt.description}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≥–∞—Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """

                send_email_task.delay(
                    subject=subject,
                    message=message,
                    recipient_list=[debt.store.user.email]
                )

                notifications_sent += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–ª–≥–µ {debt.id}: {e}")

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–∞—Ö")
        return f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {exc}")
        raise exc


@shared_task
def update_product_costs():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        from apps.cost_accounting.services import CostCalculationService
        from apps.products.models import Product

        updated_count = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        products = Product.objects.filter(is_active=True)

        for product in products:
            try:
                new_cost = CostCalculationService.calculate_product_cost(product)

                if new_cost != product.cost_price:
                    product.cost_price = new_cost
                    product.save(update_fields=['cost_price'])
                    updated_count += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ {product.id}: {e}")

        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å {updated_count} —Ç–æ–≤–∞—Ä–æ–≤")
        return f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ç–æ–≤–∞—Ä–æ–≤"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {exc}")
        raise exc


@shared_task
def backup_database():
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import os
        import subprocess
        from django.conf import settings

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        db_config = settings.DATABASES['default']

        if db_config['ENGINE'] == 'django.db.backends.postgresql':
            # –°–æ–∑–¥–∞—ë–º –¥–∞–º–ø PostgreSQL
            timestamp = timezone.now().strftime('%Y%m%d_%H%M%S')
            backup_file = f"/app/backups/backup_{timestamp}.sql"

            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
            os.makedirs('/app/backups', exist_ok=True)

            # –í—ã–ø–æ–ª–Ω—è–µ–º pg_dump
            cmd = [
                'pg_dump',
                f"--host={db_config['HOST']}",
                f"--port={db_config['PORT']}",
                f"--username={db_config['USER']}",
                f"--dbname={db_config['NAME']}",
                f"--file={backup_file}",
                '--verbose'
            ]

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env['PGPASSWORD'] = db_config['PASSWORD']

            result = subprocess.run(cmd, env=env, capture_output=True, text=True)

            if result.returncode == 0:
                logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
                cleanup_old_backups.delay()

                return f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}"
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {result.stderr}")
                raise Exception(f"–û—à–∏–±–∫–∞ pg_dump: {result.stderr}")

        else:
            logger.warning("–ë—ç–∫–∞–ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL")
            return "–ë—ç–∫–∞–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –ë–î"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {exc}")
        raise exc


@shared_task
def cleanup_old_backups():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    try:
        import os
        import glob

        backup_dir = '/app/backups'
        if not os.path.exists(backup_dir):
            return "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
        cutoff_time = timezone.now() - timedelta(days=7)
        cutoff_timestamp = cutoff_time.timestamp()

        backup_files = glob.glob(os.path.join(backup_dir, 'backup_*.sql'))
        deleted_count = 0

        for backup_file in backup_files:
            file_time = os.path.getctime(backup_file)

            if file_time < cutoff_timestamp:
                try:
                    os.remove(backup_file)
                    deleted_count += 1
                    logger.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup_file}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞ {backup_file}: {e}")

        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤")
        return f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {exc}")
        raise exc


@shared_task
def generate_monthly_reports():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    try:
        from apps.reports.services import ReportGeneratorService

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
        today = timezone.now().date()
        first_day_this_month = today.replace(day=1)
        last_day_last_month = first_day_this_month - timedelta(days=1)
        first_day_last_month = last_day_last_month.replace(day=1)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã
        reports_generated = []

        # –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        sales_report = ReportGeneratorService.generate_sales_report(
            date_from=first_day_last_month,
            date_to=last_day_last_month
        )
        reports_generated.append('sales')

        # –û—Ç—á—ë—Ç –ø–æ –¥–æ–ª–≥–∞–º
        debt_report = ReportGeneratorService.generate_debt_report(
            date_from=first_day_last_month,
            date_to=last_day_last_month
        )
        reports_generated.append('debts')

        # –û—Ç—á—ë—Ç –ø–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_report = ReportGeneratorService.generate_cost_report(
            date_from=first_day_last_month,
            date_to=last_day_last_month
        )
        reports_generated.append('costs')

        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: {reports_generated}")
        return f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {len(reports_generated)}"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤: {exc}")
        raise exc


@shared_task
def sync_inventory_balances():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        from apps.stores.models import StoreInventory
        from apps.products.models import Product

        synced_count = 0
        errors_count = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        for inventory in StoreInventory.objects.select_related('product', 'store'):
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö

                if inventory.quantity < 0:
                    inventory.quantity = 0
                    inventory.save()
                    synced_count += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è {inventory.id}: {e}")
                errors_count += 1

        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} –∑–∞–ø–∏—Å–µ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, –æ—à–∏–±–æ–∫: {errors_count}")
        return f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced_count}, –æ—à–∏–±–æ–∫: {errors_count}"

    except Exception as exc:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {exc}")
        raise exc