# Generated by Django 5.2.5 on 2025-09-08 01:31

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0002_product_bonus_every_n_product_is_manufactured_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('physical', 'Физический'), ('overhead', 'Накладной')], max_length=20)),
                ('name', models.CharField(db_index=True, max_length=120)),
                ('unit', models.CharField(blank=True, choices=[('kg', 'кг'), ('pcs', 'шт')], help_text='Единица измерения для физических расходов', max_length=8, null=True)),
                ('price_per_unit', models.DecimalField(blank=True, decimal_places=2, help_text='Цена за единицу (динамическая)', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('status', models.CharField(choices=[('suzerain', 'Сюзерен'), ('vassal', 'Вассал'), ('commoner', 'Обыватель')], default='commoner', max_length=16)),
                ('state', models.CharField(choices=[('mechanical', 'Механический'), ('automatic', 'Автоматический')], default='automatic', max_length=16)),
                ('is_universal', models.BooleanField(default=False, help_text='Применяется ко всем товарам (универсальный тип)')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Расход',
                'verbose_name_plural': 'Расходы',
                'db_table': 'expenses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(default=1, verbose_name='Версия')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('notes', models.TextField(blank=True, verbose_name='Примечания')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bom_specification', to='products.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Спецификация (BOM)',
                'verbose_name_plural': 'Спецификации (BOM)',
                'db_table': 'bill_of_materials',
            },
        ),
        migrations.CreateModel(
            name='ProductionBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.localdate)),
                ('produced_quantity', models.DecimalField(decimal_places=3, help_text='Произведено единиц товара', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('suzerain_input_amount', models.DecimalField(blank=True, decimal_places=3, help_text='Объем главного ингредиента (Сюзерен)', max_digits=12, null=True)),
                ('physical_cost', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=12)),
                ('overhead_cost', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=12)),
                ('total_cost', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=12)),
                ('cost_per_unit', models.DecimalField(decimal_places=4, default=Decimal('0'), max_digits=12)),
                ('revenue', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Выручка от продаж', max_digits=12)),
                ('net_profit', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Чистая прибыль', max_digits=12)),
                ('cost_breakdown', models.JSONField(blank=True, default=dict, help_text='Детальная разбивка расходов и бонусов')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='production_batches', to='products.product')),
            ],
            options={
                'verbose_name': 'Производственная смена',
                'verbose_name_plural': 'Производственные смены',
                'db_table': 'production_batches',
                'ordering': ['-date', 'product__name'],
                'unique_together': {('date', 'product')},
            },
        ),
        migrations.CreateModel(
            name='AnalyticsProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Аналитика себестоимости',
                'verbose_name_plural': 'Аналитика себестоимости',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('cost_accounting.productionbatch',),
        ),
        migrations.CreateModel(
            name='DailyExpenseLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, default=django.utils.timezone.localdate)),
                ('quantity_used', models.DecimalField(blank=True, decimal_places=3, help_text='Фактически использовано (кг/шт)', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('actual_price_per_unit', models.DecimalField(blank=True, decimal_places=2, help_text='Актуальная цена на день', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('daily_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Сумма накладного расхода за день', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('total_cost', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Итоговая стоимость расхода за день', max_digits=12)),
                ('notes', models.TextField(blank=True, help_text='Комментарии')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to='cost_accounting.expense')),
            ],
            options={
                'verbose_name': 'Дневной расход',
                'verbose_name_plural': 'Дневные расходы',
                'db_table': 'daily_expense_logs',
                'ordering': ['-date', 'expense__name'],
                'unique_together': {('expense', 'date')},
            },
        ),
        migrations.CreateModel(
            name='BOMLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='Количество на 1 ед. продукта')),
                ('unit', models.CharField(choices=[('kg', 'кг'), ('pcs', 'шт')], max_length=8, verbose_name='Единица измерения')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Сюзерен (главный для расчетов)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок')),
                ('notes', models.TextField(blank=True, verbose_name='Примечания')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('bom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='cost_accounting.billofmaterial', verbose_name='Спецификация')),
                ('component_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='used_as_component_lines', to='products.product', verbose_name='Компонент-продукт')),
                ('expense', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='used_in_bom_lines', to='cost_accounting.expense', verbose_name='Расход (ингредиент)')),
            ],
            options={
                'verbose_name': 'Строка спецификации',
                'verbose_name_plural': 'Строки спецификаций',
                'db_table': 'bom_lines',
                'ordering': ['order', 'id'],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('component_product__isnull', True), ('expense__isnull', False)), models.Q(('component_product__isnull', False), ('expense__isnull', True)), _connector='OR'), name='bomline_one_of_component'), models.UniqueConstraint(condition=models.Q(('is_primary', True)), fields=('bom',), name='bomline_single_primary_per_bom')],
            },
        ),
        migrations.CreateModel(
            name='MonthlyOverheadBudget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField()),
                ('month', models.PositiveIntegerField()),
                ('planned_amount', models.DecimalField(decimal_places=2, help_text='Планируемая сумма на месяц', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('actual_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Фактическая сумма (сумма daily_amount за месяц)', max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expense', models.ForeignKey(limit_choices_to={'type': 'overhead'}, on_delete=django.db.models.deletion.CASCADE, related_name='monthly_budgets', to='cost_accounting.expense')),
            ],
            options={
                'verbose_name': 'Месячный бюджет накладных',
                'verbose_name_plural': 'Месячные бюджеты накладных',
                'db_table': 'monthly_overhead_budgets',
                'ordering': ['-year', '-month', 'expense__name'],
                'unique_together': {('year', 'month', 'expense')},
            },
        ),
        migrations.CreateModel(
            name='ProductExpense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratio_per_product_unit', models.DecimalField(decimal_places=6, help_text='Единиц расхода на 1 ед. товара', max_digits=14, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_links', to='cost_accounting.expense')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_expenses', to='products.product')),
            ],
            options={
                'verbose_name': 'Расход товара',
                'verbose_name_plural': 'Расходы товаров',
                'db_table': 'product_expenses',
                'unique_together': {('product', 'expense')},
            },
        ),
    ]
